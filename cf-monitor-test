#!/usr/bin/python
'''
Created on Mar 19, 2012

@author: shroffk
'''
from channelfinder import ChannelFinderClient
from optparse import OptionParser
import os
import re


def main():    
    requiredOpts = ['initial-file', 'final-file']
    usage = "usage: %prog -i initial-file -f final-file directory "
    parser = OptionParser(usage=usage)
    parser.add_option('-i', '--initial-file', \
                      action='store', type='string', dest='initialFile', \
                      help='the initial-file')
    parser.add_option('-f', '--final-file', \
                      action='store', type='string', dest='finalFile', \
                      help='the --final-file')
    opts, args = parser.parse_args()
    if args == None or len(args) == 0 :
        parser.error('Please specify a directory')
    if not opts.initialFile:
        parser.error('Please specify a initial test files')
    if not opts.finalFile:
        parser.error('Please specify a final test files')
    mainRun(opts, args)
  
def mainRun(opts, args):
    for directory in args:
        initialFile = os.path.normpath(directory + '/' + opts.initialFile)
        iHostName, iIocName = getArgsFromFilename(initialFile)  
        finalFile = os.path.normpath(directory + '/' + opts.finalFile)
        fHostName, fIocName = getArgsFromFilename(finalFile)
        if getPVNames(initialFile) != getPVNames(finalFile):
            raise Exception, 'initial and final file should have the same pvs'
        pvNames = getPVNames(initialFile)
        if len(pvNames) == 0:
            raise Exception, 'no pv\'s specified in the test file'
        '''
        Touch the initial file and check channelfinder
        '''
        touch(initialFile)        
        check(pvNames, iHostName, iIocName)
        '''
        Touch the final file and check channelfinder
        '''
        touch(finalFile)
        check(pvNames, fHostName, fIocName)

def check(pvNames, hostName, iocName):
    try:
        client = ChannelFinderClient()
    except:
        raise Exception, 'Unable to create a valid webResourceClient'
    channels = client.find(property=[('hostName', hostName), ('iocName', iocName)])
    if len(pvNames) == len(channels):
        for channel in channels:
            channel.Name in pvNames
    else:
        raise Exception, 'Failed check for ' + str(pvNames) + ' with: ' + hostName + ' & ' + iocName

def touch(fname, times=None):
    with file(fname, 'a'):
        os.utime(fname, times)
        
def getArgsFromFilename(completeFilePath):
    fileName = os.path.split(os.path.normpath(completeFilePath))[1]
    pattern4Hostname = '(\S+?)\.\S+'
    match = re.search(pattern4Hostname, fileName)
    if match:
        hostName = match.group(1)
    else:
        hostName = None
    pattern4Iocname = '\S+?\.(\S+?)\.\S+'
    match = re.search(pattern4Iocname, fileName)
    if match:
        iocName = match.group(1)
    else:
        iocName = None
    return hostName, iocName    

def getPVNames(completeFilePath, pattern=None):
    try:
        f = open(completeFilePath)
        pvNames = f.read().splitlines()
        pvNames = map(lambda x: x.strip(), pvNames)
        pvNames = filter(lambda x: len(x) > 0, pvNames)
        if pattern:
            pvNames = [ re.match(pattern, pvName).group() for pvName in pvNames if re.match(pattern, pvName) ]
        return pvNames
    except IOError:
        return None
    finally:
        f.close()
            
if __name__ == '__main__':
    main()   
    pass
